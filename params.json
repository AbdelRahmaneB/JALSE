{"name":"JALSE","tagline":"Java Artificial Life Simulation Engine","body":"### What is JALSE?\r\nJALSE is a lightweight framework for simple simulation written in Java 8. The framework provides dynamic yet typed entities that can be processed concurrently. The underlying implementation is up to you - by default its there but it can be replaced.\r\n\r\nBy [Elliot Ford](https://twitter.com/ellzord)\r\n\r\n### Why use JALSE?\r\n1. Its free and works right out of the box!\r\n2. You can a self-managed living data model for your simulation (or game) easily.\r\n3. Entities are soft-typed (add and remove at runtime) and can be used as any type (without error).\r\n4. Entities can be filtered and processed easily (by type, ID or attributes).\r\n5. JALSE is backed by an ActionEngine that can schedule run-once and periodic tasks (several implementations).\r\n\r\n### Getting started\r\n* [Download](https://github.com/Ellzord/JALSE/releases) or fork JALSE.\r\n* Check out the [Wiki](https://github.com/Ellzord/JALSE/wiki).\r\n* See the [API docs](http://ellzord.github.io/JALSE/docs/).\r\n* Have a look at the example projects ([HappyCows](https://github.com/Ellzord/JALSE-HappyCows) and [Messengers](https://github.com/Ellzord/JALSE-Messengers)).\r\n\r\n### Code Snippets\r\nCreating and using a simple entity type:\r\n```java\r\npublic interface Friend extends Entity {\r\n\r\n  @GetAttribute(\"name\")\r\n  String getName();\r\n  \r\n  @SetAttribute(\"name\")\r\n  void setName(String name);\r\n}\r\n\r\nFriend f = jalse.newEntity(Friend.class);\r\nf.setName(\"Ellzord\");\r\n\r\nassert(\"Ellzord\".equals(f.getName()));\r\n```\r\n\r\nFeeding all animals (not just the birds):\r\n```java\r\npublic interface Animal extends Entity{}\r\npublic interface FlyingAnimal extends Animal{}\r\n\r\njalse.streamEntitiesOfType(Animal.class).foreach(/* Feed */);\r\n```\r\n\r\nReplacing fallen enemies:\r\n```java\r\njalse.addEntityListener(new EntityAdapter() {\r\n\r\n  public void entityKilled(EntityEvent event) {\r\n    if (event.getEntity().isMarkedAsType(Evil.class)) {\r\n      /* Spawn more */\r\n    }\r\n  }\r\n});\r\n```\r\n\r\nAdrenaline when life is at risk:\r\n```java\r\nentity.addAttributeListener(\"danger\", Attributes.BOOLEAN_TYPE, new AttributeAdapter<Boolean>(){\r\n\r\n  public void attributeAdded(AttributeEvent<Boolean> event) {\r\n    if (event.getValue()) {\r\n      /* Run like hell */\r\n    }\r\n  }\r\n});\r\n```\r\n\r\nManaging a crash landing:\r\n```java\r\nStrandedSurvivors living = jalse.newEntity(StrandedSurvivors.class);\r\nfor (int i = 0; i < 10; i++) {\r\n  living.newSurvivor();\r\n}\r\n\r\nliving.scheduleForActor(new Action<StrandedSurvivors>() {\r\n\r\n  public void perform(ActionContext<StrandedSurvivors> context) {\r\n    context.getActor().streamSurvivors().foreach(Survivor::lookForFood);\r\n  }\r\n}, 0, 1, TimeUnit.SECONDS);\r\n```\r\n\r\nOn the fly values:\r\n```java\r\nentity.addAttribute(\"falling\", Attributes.BOOLEAN_TYPE, true);\r\n\r\n...\r\n\r\nentity.removeAttribute(\"falling\", Attribute.BOOLEAN_TYPE);\r\nentity.addAttribute(\"death\", Attributes.newTypeOf(Date.class), new Date());\r\n```\r\n\r\n### Going forward\r\nJALSE is still in development - to find out what is on the horizon see [Enhancements](https://github.com/Ellzord/JALSE/issues?q=is%3Aopen+is%3Aissue+label%3Aenhancement) and [Future changes](https://github.com/Ellzord/JALSE/wiki/Future-changes)!\r\n\r\n### Licence\r\nSee [LICENCE](https://github.com/Ellzord/JALSE/blob/master/LICENSE).\r\n\r\n### Shout-outs\r\nI use [JProfiler](http://www.ej-technologies.com/products/jprofiler/overview.html) for performance tuning.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}